<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode_3_subString</title>
      <link href="/2022/04/24/LeetCode-3-subString/"/>
      <url>/2022/04/24/LeetCode-3-subString/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">leetCode 3 longest sub string</a></p><p>这道题要求出string中没有重复字符的最长sub string. 考虑到复杂度的问题, 肯定不能用多次遍历查找所有sub string中最长的那个. 所以最初的思路大概是, 一次遍历的过程中维护一个没有重复字符的substring, 并记录过程中最大的长度.</p><h3 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">        </span><br><span class="line">        deque&lt;<span class="keyword">char</span>&gt; subStr;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt;= i &amp;&amp; i &lt; s.<span class="built_in">length</span>();)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(<span class="built_in">begin</span>(subStr), <span class="built_in">end</span>(subStr), s[i]) == <span class="built_in">end</span>(subStr))</span><br><span class="line">            &#123;</span><br><span class="line">                subStr.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                maxLength = (subStr.<span class="built_in">size</span>() &gt; maxLength) ? subStr.<span class="built_in">size</span>() : maxLength;</span><br><span class="line"></span><br><span class="line">                subStr.<span class="built_in">pop_front</span>();</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (subStr.<span class="built_in">size</span>() &gt; maxLength) ? subStr.<span class="built_in">size</span>() : maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行的结果是 Runtime: 58 ms，Memory Usage: 7.8 MB， 比80%的解法都慢，不过内存的使用比其他80%都少</p><p>后来参考了别人的解法，其实这里要记录的只是substring里有什么字符，并不需要求这个字符，所以没有必要用这么多的push和pop操作。又要拿一个set记录有没有，没有的添加进来，随着移动走过的丢掉就行。</p><h3 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">        </span><br><span class="line">        unordered_set&lt;<span class="keyword">char</span>&gt; visited;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt;= i &amp;&amp; i &lt; s.<span class="built_in">length</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited.<span class="built_in">find</span>(s[i]) == visited.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                visited.<span class="built_in">insert</span>(s[i]);</span><br><span class="line">                maxLength = <span class="built_in">max</span>(i - j + <span class="number">1</span>, maxLength);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; i &amp;&amp; s[j] != s[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    visited.<span class="built_in">erase</span>(s[j++]);</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">                maxLength = <span class="built_in">max</span>(i - j + <span class="number">1</span>, maxLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个的执行结果：Runtime: 27 ms，Memory Usage: 9 MB。速度快了很多，超过了47%的用户</p><p>其实还不够，因为这个set的操作和find还是比较费时间的，如果用一个array记录每个字符有没有和他的位置，然后拿两个index记录substring的起终点，这样就完全不用维护另一个数据结构来记录substring里有什么，而通过每个字符的位置和index比较就知道substring里到底有没有某个字符。而array的index可以用字符的ASCII码的值直接访问，O(1), 效率比标准容器快很懂。</p><h3 id="最终版"><a href="#最终版" class="headerlink" title="最终版"></a>最终版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dict</span><span class="params">(<span class="number">256</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>, left = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (right = <span class="number">0</span>; right &lt; s.<span class="built_in">length</span>(); ++right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dict[s[right]] != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                left = <span class="built_in">max</span>(dict[s[right]] + <span class="number">1</span>, left);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            dict[s[right]] = right;</span><br><span class="line">            maxLength = <span class="built_in">max</span>(maxLength, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于俄乌战争的一些不成熟的想法</title>
      <link href="/2022/03/05/ukriane-war/"/>
      <url>/2022/03/05/ukriane-war/</url>
      
        <content type="html"><![CDATA[<p>国小而不处卑，力少而不畏强，无礼而侮大邻，贪愎而拙交者，可亡也。</p><p>最近俄乌开战，韩非的这句话突然流行起来。我理解得这句话是说了小国的生存之道，放在当前的背景下，看起来更像是乌克兰咎由自取一样。</p><p>乍看这句话，感觉很有道理，当然也被很多朋友认为是俄罗斯入侵乌克兰合理的一个依据。但我一直觉得不太舒服，因为这句话的应用更像是在弱肉强食的丛林中，虽然是事实，但是总令人难以接受。</p><p>这两天想了好多，我觉得我想明白了一些。这句话应该是告诫小国应该怎么在大国之间生存，并不是说小国做不到这些就该死，并不能成为任何势力和个体侵犯他人的理由。这就好像我们出门应该锁门一样，难道说我们不锁门外出，家里东西被人拿了就不算偷盗，是合法的吗？</p><p>还有的人为了说明俄罗斯入侵合理，列举了一堆美国盟友入侵他国的例子，还有乌克兰国内的极端民族冲突的事例，但人家国内不好，并不能说俄罗斯就应该在未收到官方允许的情况下出兵去“帮”乌克兰解决问题。毕竟每个国家内部都有一些各自的问题和冲突……</p><p>有人觉得北约东扩，侵犯了俄罗斯的战乱缓冲地区。我理解的这个东西，就是二战结束后雅尔塔会议三巨头在重新划分势力范围的产物。首先这个东西，类似于代理人，大概就是说一旦发生争端，尽量把冲突控制在周边地带，不要影响本国，这本来就是大国对于小国权益的不尊重，况且大国之间真的到了不得不打的地步，多一些“缓冲区”并没有什么用。</p><p>我觉得的理想的世界，应该是所有的国家和各种民族、肤色、性别的人都是平等的，虽然很难实现，毕竟现实社会更像是一个丛林。但是我们可以用现实的理论来分析现实，而不应该把这种丛林法则理论看作是理所当然的。</p><p>所以，在此基础上，大国把小国看成是附庸和外围，本来就是对现实世界妥协的产物。</p><p>况且，即使从现实的角度看，要达成这种目标，大国给小国的要么是威胁，要么是利益，如果小国权衡利弊后发现有更好的替代者，自然这种关系就难以维系。</p><p>己所不欲，勿施于人，这个道理代换进去，其实很容易想清楚。如果还把这个当成是合理的要求，那这想法可真是挺自私的……</p><p>很多人想这个问题，都是从国家民族利益角度去想，但作为普通的个人，是什么让他们站到了这样的高度呢？不应该更多考虑的是战争中像我们一样的每一个个体吗？有时候国家的利益与普通平民并不完全一致。我理解的，这些大局更多代表的是政治家的利益和野心，战争中的平民没有胜利者。不管二战时候英美俄中、德意日，还是现在的乌克兰、俄罗斯平民，都是战争的受害者。</p><p>所以，我觉得我自己，在今后很长一段的时间里，都会是个坚定的反战者，不支持任何国家和势力对他人的侵犯。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Fibonacci</title>
      <link href="/2021/12/22/Fibonacci/"/>
      <url>/2021/12/22/Fibonacci/</url>
      
        <content type="html"><![CDATA[<p>最近参与面试了几个候选人，面试题中有一道计算Fibonacci数列的，发现自己对这道题的掌握也不怎么充分，所以写篇文章整理一下。</p><p>Fibonacci数列的解法，复杂度来区分大概有指数型,常数型和对数型几种,下面一一介绍。</p><h2 id="普通递归"><a href="#普通递归" class="headerlink" title="普通递归"></a>普通递归</h2><p>一般最常见，最容易理解的解法就是递归法了，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibo</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == n) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == n) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fibo</span>(n - <span class="number">1</span>) + <span class="built_in">fibo</span>(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归法最大的问题在于它的容易造成栈溢出(尾递归除外), 其次是效率很低, 存在太多的重复计算。把具体的步骤分解为树状，形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                   F(5)</span><br><span class="line">                /        \</span><br><span class="line">            F(4)         F(3)</span><br><span class="line">          /    \        /     \</span><br><span class="line">      F(3)    F(2)     F(2)    F(1)</span><br><span class="line">    /   \     /   \     /  \</span><br><span class="line">  F(2) F(1) F(1) F(0) F(1) F(0)</span><br><span class="line"> /  \</span><br><span class="line">F(1) F(0)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里可以很直观的看到，为了计算F(5), 我们需要计算多次f(3)和f(2),这些都是不必要的。而这种解法的时间复杂度，是O($(\frac{1 + \sqrt5}{2})^n$)，或者也有人粗略的记为$O(2^n)$。</p><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>为了对此进行优化，我们可以利用类似的DP的方法，将曾经计算过的结果都保存下来，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int fibo(int n)</span><br><span class="line">&#123;</span><br><span class="line">    std::vector&lt;int&gt; result(n+1, 0);</span><br><span class="line"></span><br><span class="line">    result[1] = 1;</span><br><span class="line"></span><br><span class="line">    for (int i = 2; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        result[i] = result[i-1] + result[i-2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由代码可以看出,其实我们只需要记录最近的两个值就可以了, 所以可以得到常见的迭代版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int fibo(int n)</span><br><span class="line">&#123;</span><br><span class="line">    if (n &lt; 1) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (n == 1) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        int a = 0;</span><br><span class="line">        int b = 1;</span><br><span class="line"></span><br><span class="line">        for (int i = 2; i &lt;= n; ++i) &#123;</span><br><span class="line">            int tmp = a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代解法的时间复杂度为Ｏ(n)。</p><h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>其实除了上面普通递归之外，还有一种 <a href="https://en.wikipedia.org/wiki/Tail_call">尾递归</a>，它的执行效率和所需的资源类似于迭代, 代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int fibo(int a, int b, int n)</span><br><span class="line">&#123;</span><br><span class="line">    if (n &lt; 1) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (n &lt;= 2) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (3 == n) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return fibo2(b, a + b, n - 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里关于尾递归的问题，自己理解的还不够，先挖个坑，以后再写一篇关于尾递归的。</p><h2 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h2><p>根据以下公式：</p><p>$$<br>    \begin{bmatrix}<br>    f(n-1) \<br>    f(n)<br>    \end{bmatrix}<br>    =<br>    \begin{bmatrix}<br>    f(n-1) \<br>    f(n-1) + f(n-2)<br>    \end{bmatrix}<br>    =<br>    \begin{bmatrix}<br>    0 \times f(n-2) + 1 \times f(n-1)\<br>    1 \times f(n-2) + 1 \times f(n-1)<br>    \end{bmatrix}<br>    =<br>    \begin{bmatrix}<br>    0 &amp; 1\<br>    1 &amp; 1<br>    \end{bmatrix}<br>    \times<br>    \begin{bmatrix}<br>    f(n-2) \<br>    f(n-1)<br>    \end{bmatrix}<br>    =<br>    \begin{bmatrix}<br>    0 &amp; 1\<br>    1 &amp; 1<br>    \end{bmatrix}^{n-1}<br>    \times<br>    \begin{bmatrix}<br>    f(0) \<br>    f(1)<br>    \end{bmatrix}<br>$$</p><p>所以求Fibonacci的第n的数就可以简化为$\begin{bmatrix} 0 &amp; 1\ 1 &amp; 1 \end{bmatrix}^{n-1}$与$\begin{bmatrix}0 \1\end{bmatrix}$相乘。</p><p>具体实现的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">class Matrix</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Matrix(int height, int width)</span><br><span class="line">        : height_(height),</span><br><span class="line">          width_(width),</span><br><span class="line">          container_(height*width, 0)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int get(int row, int col)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(row &lt; height_ &amp;&amp; col &lt; width_);</span><br><span class="line">        return container_[row*width_ + col];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void set(int row, int col, int val)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(row &lt; height_ &amp;&amp; col &lt; width_);        </span><br><span class="line">        container_[row*width_ + col] = val;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    int height_;</span><br><span class="line">    int width_;</span><br><span class="line">    std::vector&lt;int&gt; container_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Matrix matrix_22_mul(Matrix a, Matrix b)</span><br><span class="line">&#123;</span><br><span class="line">    Matrix result(2, 2);</span><br><span class="line"></span><br><span class="line">    result.set(0, 0, a.get(0, 0)*b.get(0, 0) + a.get(0, 1)*b.get(1, 0));</span><br><span class="line">    result.set(0, 1, a.get(0, 0)*b.get(0, 1) + a.get(0, 1)*b.get(1, 1));</span><br><span class="line">    result.set(1, 0, a.get(1, 0)*b.get(0, 0) + a.get(1, 1)*b.get(1, 0));</span><br><span class="line">    result.set(1, 1, a.get(1, 0)*b.get(0, 1) + a.get(1, 1)*b.get(1, 1));</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int fibo(int n)</span><br><span class="line">&#123;</span><br><span class="line">    if (n &lt; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (n == 1)</span><br><span class="line">    &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix result(2, 2);</span><br><span class="line">        result.set(0, 0, 0);</span><br><span class="line">        result.set(0, 1, 0);</span><br><span class="line">        result.set(1, 0, 1);</span><br><span class="line">        result.set(1, 1, 0);</span><br><span class="line"></span><br><span class="line">        Matrix factor(2, 2);</span><br><span class="line">        factor.set(0, 0, 0);</span><br><span class="line">        factor.set(0, 1, 1);</span><br><span class="line">        factor.set(1, 0, 1);</span><br><span class="line">        factor.set(1, 1, 1);</span><br><span class="line"></span><br><span class="line">        Matrix multiplier(factor);</span><br><span class="line"></span><br><span class="line">        while (n &gt; 2)</span><br><span class="line">        &#123;</span><br><span class="line">            multiplier = matrix_22_mul(multiplier, factor);</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = matrix_22_mul(multiplier, result);</span><br><span class="line"></span><br><span class="line">        return result.get(1, 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一解法跟之前的比看起来是更麻烦了, 但是n次方运算是可以用O(logN)的复杂度解决的, 也叫做矩阵快速幂, 简单来说，就是<br>$$<br>A^n = \begin{cases}<br>        A^{n/2} \times A^{n/2} &amp; \text{if n is even} \<br>        A \times A^{(n-1)/2} \times A^{(n-1)/2} &amp; \text{if n is odd}<br>    \end{cases}<br>$$</p><p>代码实现如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">if (n &lt; 1)</span><br><span class="line">&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">else if (n == 1)</span><br><span class="line">&#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    Matrix result(2, 2);</span><br><span class="line">    result.set(0, 0, 0);</span><br><span class="line">    result.set(0, 1, 0);</span><br><span class="line">    result.set(1, 0, 1);</span><br><span class="line">    result.set(1, 1, 0);</span><br><span class="line"></span><br><span class="line">    Matrix factor(2, 2);</span><br><span class="line">    factor.set(0, 0, 0);</span><br><span class="line">    factor.set(0, 1, 1);</span><br><span class="line">    factor.set(1, 0, 1);</span><br><span class="line">    factor.set(1, 1, 1);</span><br><span class="line"></span><br><span class="line">    Matrix multiplier(2, 2);</span><br><span class="line">    multiplier.set(0, 0, 1);</span><br><span class="line">    multiplier.set(0, 1, 0);</span><br><span class="line">    multiplier.set(1, 0, 1);</span><br><span class="line">    multiplier.set(1, 1, 0);</span><br><span class="line"></span><br><span class="line">    while (n &gt; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        if (n &amp; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            multiplier = matrix_22_mul(multiplier, factor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        factor = matrix_22_mul(factor, factor);</span><br><span class="line">        n &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    multiplier = matrix_22_mul(multiplier, factor);</span><br><span class="line"></span><br><span class="line">    result = matrix_22_mul(multiplier, result);</span><br><span class="line"></span><br><span class="line">    return result.get(1, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通项公式法"><a href="#通项公式法" class="headerlink" title="通项公式法"></a>通项公式法</h2><p>Fibonacci是有通项公式的, 如下, 具体推导过程请参考引用条目<br>$$<br>f(n) =\frac{(\frac{1 + \sqrt5}{2})^n - (\frac{1 - \sqrt5}{2})^n}{\sqrt5}<br>$$<br>其代码实现如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int fibo(int n)</span><br><span class="line">&#123;</span><br><span class="line">    return (std::pow((1 + std::sqrt(5)) / 2, n) - std::pow((1 - std::sqrt(5)) / 2, n)) / std::sqrt(5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里从我们的代码实现来看是O(1)的,但其实这里是有计算$x^n$的,这个幂的计算最终的实现大概率还是O(logN)的。而这里引入了浮点运算以及本身的精度问题，所以并不是一个很好的选择。仅供参考。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其实SICP这本书里还提供了一种解法, 但实际上和矩阵法是类似的,这里就不具体列出了,可以参考引用7</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol><li><a href="https://www.ics.uci.edu/~eppstein/161/960109.html">ICS 161: Design and Analysis of Algorithms<br>Lecture notes for January 9, 1996</a></li><li><a href="https://zhuanlan.zhihu.com/p/74751385">斐波那契数列的N种解法</a></li><li><a href="https://blog.mottomo.moe/categories/Tech/Coding/zh/2019-04-07-Fibonacci-Implementations/">几种斐波那契数列项算法的复杂度分析</a></li><li><a href="https://blog.csdn.net/u012684062/article/details/76330075">斐波那契数列数列的三种时间复杂度的实现方法</a></li><li><a href="https://blog.gocalf.com/calc-fibonacci">计算斐波纳契数，分析算法复杂度</a></li><li><a href="https://sicp.readthedocs.io/en/latest/chp1/13.html">SICP 第一章习题1.13</a></li><li><a href="https://sicp.readthedocs.io/en/latest/chp1/19.html">SICP 第一章习题1.19</a></li><li><a href="https://www.lintcode.com/problem/949/">leetcode 949</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My first post</title>
      <link href="/2021/12/21/My-first-post/"/>
      <url>/2021/12/21/My-first-post/</url>
      
        <content type="html"><![CDATA[<p>自由与其说是集体的，不如说是个人存在的价值。政权本身（即使是人民政权）并不自动表明自由的状况。民主，尤其是人民政权理解的民主，可能变成较之专制政体更厉害的不自由。 当缺乏防御政权对人的侵犯，缺乏对人的法律保护，当个人完全从属于大多数人，从属于集体意志的时候，便会出现这种情况。这种民主很容易走向自己的反面——极权主义，大多数对少数、集体对个人、共性对个性的绝对权力。在这个意义上，任何政权，包括民主的、人民的政权，如果不受到法律的限制，不捍卫个人的权利，那么，都是对自由的威胁。</p><div style="text-align: right">——瓦·梅茹耶夫《知识分子与民主》</div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
